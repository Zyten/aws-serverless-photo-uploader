CognitoUserPool:
  Type: AWS::Cognito::UserPool
  Properties:
    UserPoolName: ${self:custom.COGNITO_POOL}
    UsernameAttributes:
      - email
    AutoVerifiedAttributes:
      - email
    Schema:
      - Name: email
        Required: true
        Mutable: false      
      - Name: picture
        Required: true
        Mutable: true
      # Custom attributes - please note: Required custom attributes are not supported currently by AWS
      - AttributeDataType: String
        Mutable: false # User (or system) cannot change this once account has been created
        Name: region #custom:region         
      - AttributeDataType: String
        Mutable: true # This CAN be changed after user creation
        Name: memberType #custom:memberType
    Policies:
          PasswordPolicy: # Keeping the password policy fairly relaxed for now (You can actually change this at any time it turns out, even if you already have users)
            MinimumLength: 8
            RequireSymbols: false
            RequireNumbers: false
            RequireUppercase: false


CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties: 
          ClientName: ${self:custom.COGNITO_POOL}-client
          UserPoolId: !Ref CognitoUserPool
          GenerateSecret: false
          ExplicitAuthFlows:
            - ALLOW_REFRESH_TOKEN_AUTH #Enable authflow to refresh tokens.
            - ALLOW_USER_SRP_AUTH #Enable SRP-based authentication.
            - ALLOW_CUSTOM_AUTH #Enable Lambda trigger based authentication.
            - ALLOW_USER_PASSWORD_AUTH #Enable user password-based authentication. In this flow, Amazon Cognito receives the password in the request instead of using the SRP protocol to verify passwords.